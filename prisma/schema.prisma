// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model - managed by Clerk, but we need it for relations
model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clients         Client[]
  quotes          Quote[]
  uploadedFiles   UploadedFile[]
  quoteVersions   QuoteVersion[]

  @@index([clerkId])
  @@index([email])
}

// Client model - stores customer information
model Client {
  id           String   @id @default(uuid())
  name         String
  email        String?
  phone        String?
  address      String?
  company      String?
  notes        String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes Quote[]

  @@index([userId])
  @@index([name])
}

// Quote model - main quote entity
model Quote {
  id             String      @id @default(uuid())
  quoteNumber    String      @unique
  title          String
  description    String?
  status         QuoteStatus @default(DRAFT)
  validUntil     DateTime?
  subtotal       Float       @default(0)
  tax            Float       @default(0)
  total          Float       @default(0)
  notes          String?
  termsConditions String?
  clientId       String
  userId         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  client        Client         @relation(fields: [clientId], references: [id], onDelete: Restrict)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         QuoteItem[]
  versions      QuoteVersion[]

  @@index([userId])
  @@index([clientId])
  @@index([quoteNumber])
  @@index([status])
  @@index([createdAt])
}

// QuoteItem model - individual line items in a quote
model QuoteItem {
  id          String   @id @default(uuid())
  description String
  quantity    Float
  unit        String
  unitPrice   Float
  total       Float
  notes       String?
  sortOrder   Int      @default(0)
  quoteId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@index([quoteId])
  @@index([sortOrder])
}

// QuoteVersion model - stores historical versions of quotes
model QuoteVersion {
  id         String   @id @default(uuid())
  quoteId    String
  versionNumber Int
  data       Json     // Stores the complete quote data as JSON
  notes      String?
  userId     String
  createdAt  DateTime @default(now())

  // Relations
  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([quoteId, versionNumber])
  @@index([quoteId])
  @@index([createdAt])
}

// UploadedFile model - tracks uploaded PDFs for OCR processing
model UploadedFile {
  id              String           @id @default(uuid())
  fileName        String
  fileSize        Int
  fileUrl         String
  status          FileStatus       @default(UPLOADING)
  ocrResult       Json?            // Stores extracted text and metadata
  extractedItems  Json?            // Stores parsed line items
  processingError String?
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Enums
enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
}

enum FileStatus {
  UPLOADING
  PROCESSING
  PENDING_VERIFICATION
  VERIFIED
  FAILED
}
