// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - managed by Clerk, but we need it for relations
model User {
  id          String    @id @default(uuid())
  clerkId     String    @unique
  email       String    @unique
  firstName   String?
  lastName    String?
  avatarUrl   String?
  role        UserRole  @default(VIEWER)
  isActive    Boolean   @default(true)
  
  // Permissions
  canCreateQuotes    Boolean @default(false)
  canEditQuotes      Boolean @default(false)
  canDeleteQuotes    Boolean @default(false)
  canViewAllQuotes   Boolean @default(false) // false = only their own
  canManageUsers     Boolean @default(false)
  canViewReports     Boolean @default(false)
  canManageSettings  Boolean @default(false)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  clients         Client[]
  createdQuotes   Quote[]  @relation("CreatedBy")
  assignedQuotes  Quote[]  @relation("AssignedTo")
  uploadedFiles   UploadedFile[]
  materials       Material[]
  laborRates      LaborRate[]
  laborRateTemplates LaborRateTemplate[]
  settings        Settings?
  aiSessions      AISession[]

  @@index([clerkId])
  @@index([email])
}

// Client model - stores customer information
model Client {
  id           String   @id @default(uuid())
  name         String
  email        String?
  phone        String?
  address      String?
  company      String?
  notes        String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes Quote[]

  @@index([userId])
  @@index([name])
}

// Quote model - main quote entity
model Quote {
  id             String      @id @default(uuid())
  quoteNumber    String      @unique
  title          String
  description    String?
  status         QuoteStatus @default(DRAFT)
  validUntil     DateTime?
  subtotal       Float       @default(0)
  tax            Float       @default(0)
  total          Float       @default(0)
  notes          String?
  termsConditions String?
  versionNumber  Int         @default(1)
  clientId       String?
  createdById    String
  assignedToId   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  client        Client?        @relation(fields: [clientId], references: [id], onDelete: Restrict)
  createdBy     User           @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  assignedTo    User?          @relation("AssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  items         QuoteItem[]
  versions      QuoteVersion[]

  @@index([createdById])
  @@index([assignedToId])
  @@index([clientId])
  @@index([quoteNumber])
  @@index([status])
  @@index([createdAt])
}

// QuoteItem model - individual line items in a quote
model QuoteItem {
  id          String    @id @default(cuid())
  description String
  quantity    Float
  unit        Unit      @default(EA)
  unitPrice   Float
  total       Float
  itemType    ItemType  @default(CUSTOM)
  notes       String?
  sortOrder   Int       @default(0)
  
  // Relations
  quoteId     String
  quote       Quote     @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  
  // Optional relations to materials/labor
  materialId  String?
  material    Material? @relation(fields: [materialId], references: [id])
  laborRateId String?
  laborRate   LaborRate? @relation(fields: [laborRateId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([quoteId])
  @@index([sortOrder])
}

// QuoteVersion model - stores historical versions of quotes
model QuoteVersion {
  id         String   @id @default(uuid())
  quoteId    String
  versionNumber Int
  changes    Json     // Stores the version changes as JSON
  notes      String?
  createdAt  DateTime @default(now())

  // Relations
  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@unique([quoteId, versionNumber])
  @@index([quoteId])
  @@index([createdAt])
}

// UploadedFile model - tracks uploaded PDFs for OCR processing
model UploadedFile {
  id              String           @id @default(uuid())
  fileName        String
  fileSize        Int
  fileUrl         String
  status          FileStatus       @default(UPLOADING)
  ocrResult       Json?            // Stores extracted text and metadata
  extractedItems  Json?            // Stores parsed line items
  processingError String?
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Enums
enum UserRole {
  OWNER         // Full access to everything
  ADMIN         // Can manage users and all data
  MANAGER       // Can manage quotes and invoices
  EMPLOYEE      // Can view and create quotes
  VIEWER        // Read-only access
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
}

enum FileStatus {
  UPLOADING
  PROCESSING
  PENDING_VERIFICATION
  VERIFIED
  FAILED
}

enum Unit {
  EA    // Each
  LM    // Linear Metre
  SQM   // Square Metre
  HR    // Hour (for labor)
  DAY   // Day rate
  PACK  // Pack
  KG    // Kilogram
  L     // Litre
}

enum ItemType {
  CUSTOM
  MATERIAL
  LABOR
}

// Material model - stores materials catalog
model Material {
  id            String   @id @default(cuid())
  name          String
  description   String?
  sku           String?  @unique
  supplier      String?
  unit          Unit     @default(EA)
  pricePerUnit  Float    @map("pricePerUnit")
  gstInclusive  Boolean  @default(true) @map("gstInclusive")
  category      String?  // Timber, Hardware, Fixings, etc.
  inStock       Boolean  @default(true) @map("inStock")
  notes         String?
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Scraping fields
  lastScrapedAt    DateTime?
  sourceUrl        String?
  scraperType      String?     // "bunnings" or "custom"
  scraperSelectors Json?       // CSS selectors for custom URLs
  
  // Relations
  quoteItems    QuoteItem[]
  priceUpdates  PriceUpdate[]
  
  @@index([category])
  @@index([name])
  @@index([userId])
}

// LaborRate model - stores labor rates
model LaborRate {
  id            String   @id @default(cuid())
  title         String   // Carpenter, Leading Hand, Apprentice
  level         String?  // Level 1-4
  baseRate      Float    // Per hour rate
  saturdayRate  Float    // 1.5x typically
  sundayRate    Float    // 2x typically
  loadedRate    Float    // With oncosts (super, insurance, etc)
  description   String?
  effectiveDate DateTime
  createdAt     DateTime @default(now())
  
  // Relations
  quoteItems    QuoteItem[]
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  @@index([title])
}

// LaborRateTemplate model - stores extracted labor rates from documents
model LaborRateTemplate {
  id            String   @id @default(cuid())
  category      String   // framing, doors, windows, decking, etc.
  activity      String   // specific activity description
  unit          Unit     // HR, DAY, SQM, LM, EA
  rate          Float    // extracted rate value
  description   String?  // additional context
  source        String?  // filename it was extracted from
  confidence    Float?   // extraction confidence score (0-1)
  isActive      Boolean  @default(true)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([category])
  @@unique([userId, activity, unit])
}

// Settings model - stores user/company default settings
model Settings {
  id                      String   @id @default(uuid())
  
  // Company Information
  companyName             String
  companyAddress          String
  companyPhone            String
  companyEmail            String
  abn                     String?
  
  // Quote Defaults
  defaultTaxRate          Float    @default(10)
  defaultValidityDays     Int      @default(30)
  defaultTermsConditions  String?  @db.Text
  defaultNotes            String?  @db.Text
  defaultUnit             Unit     @default(EA)
  
  // Labor Rate Multipliers
  saturdayRateMultiplier  Float    @default(1.5)
  sundayRateMultiplier    Float    @default(2.0)
  
  // Relations
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@index([userId])
}

// AI Assistant Models

// AISession model - stores AI assistant chat sessions
model AISession {
  id             String   @id @default(cuid())
  userId         String
  messages       Json     // Chat history array
  files          Json?    // Uploaded file references
  generatedQuote Json?    // Generated quote data
  status         String   @default("active") // active, completed
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
}

// PriceUpdate model - stores price changes from web scraping
model PriceUpdate {
  id              String    @id @default(cuid())
  productId       String
  currentPrice    Float
  scrapedPrice    Float
  percentChange   Float
  source          String    // bunnings, bowens, etc
  status          String    @default("pending") // pending, approved, rejected
  approvedBy      String?
  approvalNotes   String?
  scrapedAt       DateTime
  reviewedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  material        Material  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([status])
}

// MCPConnection model - stores MCP service connections
model MCPConnection {
  id           String    @id @default(cuid())
  name         String
  type         String    // postgresql, playwright, memory, brave
  config       Json      // Connection configuration
  status       String    @default("active") // active, inactive
  lastUsed     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([type])
  @@index([status])
}

